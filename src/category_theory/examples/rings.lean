/- Copyright (c) 2018 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison, Johannes H√∂lzl

Introduce CommRing -- the category of commutative rings.

Currently only the basic setup.
-/

import category_theory.examples.monoids
import category_theory.fully_faithful
import category_theory.adjunction
import linear_algebra.multivariate_polynomial
import algebra.ring

universes u v

open category_theory

namespace category_theory.examples

/-- The category of rings. -/
@[reducible] def Ring : Type (u+1) := bundled ring

instance (x : Ring) : ring x := x.str

instance concrete_is_ring_hom : concrete_category @is_ring_hom :=
‚ü®by introsI Œ± ia; apply_instance,
  by introsI Œ± Œ≤ Œ≥ ia ib ic f g hf hg; apply_instance‚ü©

instance Ring_hom_is_ring_hom {R S : Ring} (f : R ‚ü∂ S) : is_ring_hom (f : R ‚Üí S) := f.2

/-- The category of commutative rings. -/
@[reducible] def CommRing : Type (u+1) := bundled comm_ring

instance (x : CommRing) : comm_ring x := x.str

-- Here we don't use the `concrete` machinery,
-- because it would require introducing a useless synonym for `is_ring_hom`.
instance : category CommRing :=
{ hom := Œª R S, { f : R ‚Üí S // is_ring_hom f },
  id := Œª R, ‚ü® id, by resetI; apply_instance ‚ü©,
  comp := Œª R S T g h, ‚ü® h.1 ‚àò g.1, begin haveI := g.2, haveI := h.2, apply_instance end ‚ü© }

namespace CommRing
variables {R S T : CommRing.{u}}

@[simp] lemma id_val : subtype.val (ùüô R) = id := rfl
@[simp] lemma comp_val (f : R ‚ü∂ S) (g : S ‚ü∂ T) :
  (f ‚â´ g).val = g.val ‚àò f.val := rfl

instance hom_coe : has_coe_to_fun (R ‚ü∂ S) :=
{ F := Œª f, R ‚Üí S,
  coe := Œª f, f.1 }

@[simp] lemma hom_coe_app (f : R ‚ü∂ S) (r : R) : f r = f.val r := rfl

instance hom_is_ring_hom (f : R ‚ü∂ S) : is_ring_hom (f : R ‚Üí S) := f.2

def Int : CommRing := ‚ü®‚Ñ§, infer_instance‚ü©

def Int.cast {R : CommRing} : Int ‚ü∂ R := { val := int.cast, property := by apply_instance }

def int.eq_cast' {R : Type u} [ring R] (f : int ‚Üí R) [is_ring_hom f] : f = int.cast :=
funext $ int.eq_cast f (is_ring_hom.map_one f) (Œª _ _, is_ring_hom.map_add f)

def Int.hom_unique {R : CommRing} : unique (Int ‚ü∂ R) :=
{ default := Int.cast,
  uniq := Œª f, subtype.ext.mpr $ funext $ int.eq_cast f f.2.map_one f.2.map_add }

/-- The forgetful functor commutative rings to Type. -/
def forget : CommRing.{u} ‚•§ Type u :=
{ obj := Œª R, R,
  map := Œª _ _ f, f }

instance forget.faithful : faithful (forget) := {}

/-- The functor from commutative rings to rings. -/
def to_Ring : CommRing.{u} ‚•§ Ring.{u} :=
{ obj := Œª X, { Œ± := X.1, str := by apply_instance },
  map := Œª X Y f, ‚ü® f, by apply_instance ‚ü© }

instance to_Ring.faithful : faithful (to_Ring) := {}

/-- The forgetful functor from commutative rings to (multiplicative) commutative monoids. -/
def forget_to_CommMon : CommRing.{u} ‚•§ CommMon.{u} :=
{ obj := Œª X, { Œ± := X.1, str := by apply_instance },
  map := Œª X Y f, ‚ü® f, by apply_instance ‚ü© }

instance forget_to_CommMon.faithful : faithful (forget_to_CommMon) := {}

example : faithful (forget_to_CommMon ‚ãô CommMon.forget_to_Mon) := by apply_instance

section
open mv_polynomial
local attribute [instance, priority 0] subtype.fintype set_fintype classical.prop_decidable

noncomputable def polynomial : Type u ‚•§ CommRing.{u} :=
{ obj := Œª Œ±, ‚ü®mv_polynomial Œ± ‚Ñ§, by apply_instance‚ü©,
  map := Œª Œ± Œ≤ f, ‚ü®eval‚ÇÇ C (X ‚àò f), by apply_instance‚ü©,
  map_id' := Œª Œ±, subtype.ext.mpr $ funext $ eval‚ÇÇ_eta,
  map_comp' := Œª Œ± Œ≤ Œ≥ f g, subtype.ext.mpr $ funext $ Œª p,
  by apply mv_polynomial.induction_on p; intros;
    simp only [*, eval‚ÇÇ_add, eval‚ÇÇ_mul, eval‚ÇÇ_C, eval‚ÇÇ_X, comp_val,
      eq_self_iff_true, function.comp_app, types_comp] at * }

@[simp] lemma polynomial_obj_Œ± {Œ± : Type u} :
  (polynomial.obj Œ±).Œ± = mv_polynomial Œ± ‚Ñ§ := rfl

@[simp] lemma polynomial_map_val {Œ± Œ≤ : Type u} {f : Œ± ‚Üí Œ≤} :
  (polynomial.map f).val = eval‚ÇÇ C (X ‚àò f) := rfl

noncomputable def adj : adjunction polynomial (forget : CommRing ‚•§ Type u) :=
adjunction.mk_of_hom_equiv _ _
{ hom_equiv := Œª Œ± R,
  { to_fun := Œª f, f ‚àò X,
    inv_fun := Œª f, ‚ü®eval‚ÇÇ int.cast f, by apply_instance‚ü©,
    left_inv := Œª f, subtype.ext.mpr $ funext $ Œª p,
    begin
      have H0 := Œª n, (congr (int.eq_cast' (f.val ‚àò C)) (rfl : n = n)).symm,
      have H1 := Œª p‚ÇÅ p‚ÇÇ, (@is_ring_hom.map_add _ _ _ _ f.val f.2 p‚ÇÅ p‚ÇÇ).symm,
      have H2 := Œª p‚ÇÅ p‚ÇÇ, (@is_ring_hom.map_mul _ _ _ _ f.val f.2 p‚ÇÅ p‚ÇÇ).symm,
      apply mv_polynomial.induction_on p; intros;
      simp only [*, eval‚ÇÇ_add, eval‚ÇÇ_mul, eval‚ÇÇ_C, eval‚ÇÇ_X,
        eq_self_iff_true, function.comp_app, hom_coe_app] at *
    end,
    right_inv := by tidy },
  hom_equiv_naturality_left_symm' := Œª X' X Y f g, subtype.ext.mpr $ funext $ Œª p,
  begin
    apply mv_polynomial.induction_on p; intros;
    simp only [*, eval‚ÇÇ_mul, eval‚ÇÇ_add, eval‚ÇÇ_C, eval‚ÇÇ_X,
      comp_val, equiv.coe_fn_symm_mk, hom_coe_app, polynomial_map_val,
      eq_self_iff_true, function.comp_app, add_right_inj, types_comp] at *
  end }

end

end CommRing

end category_theory.examples
